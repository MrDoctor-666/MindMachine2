//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/DinoDaforScript/DeliveryBotAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DeliveryBotAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DeliveryBotAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DeliveryBotAction"",
    ""maps"": [
        {
            ""name"": ""DeliveryBot"",
            ""id"": ""e8b80894-7fb5-468b-a611-90e74f2bbd54"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5f30071a-c83b-4a50-91cd-12052b43f251"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""5a48e489-924d-49ed-aacb-881a6327321a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c6b22a19-2060-4d9a-85f9-c12c7c44f61f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4c8e6ca6-5c3f-4fe8-ac78-eb26dbceb7a6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ee2e9485-bb9d-46e8-83c8-484549a1cc7f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bfecb8f0-ba5f-4f78-b1b0-fbd0fd9a4d10"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DeliveryBot
        m_DeliveryBot = asset.FindActionMap("DeliveryBot", throwIfNotFound: true);
        m_DeliveryBot_Move = m_DeliveryBot.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DeliveryBot
    private readonly InputActionMap m_DeliveryBot;
    private IDeliveryBotActions m_DeliveryBotActionsCallbackInterface;
    private readonly InputAction m_DeliveryBot_Move;
    public struct DeliveryBotActions
    {
        private @DeliveryBotAction m_Wrapper;
        public DeliveryBotActions(@DeliveryBotAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_DeliveryBot_Move;
        public InputActionMap Get() { return m_Wrapper.m_DeliveryBot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeliveryBotActions set) { return set.Get(); }
        public void SetCallbacks(IDeliveryBotActions instance)
        {
            if (m_Wrapper.m_DeliveryBotActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_DeliveryBotActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_DeliveryBotActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_DeliveryBotActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_DeliveryBotActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public DeliveryBotActions @DeliveryBot => new DeliveryBotActions(this);
    public interface IDeliveryBotActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
